openapi: 3.0.3
info:
  title: Attendee Service
  description: |-
    This backend microservice manages attendee registrations. This includes    
    - creating and editing registrations
    - adding and removing packages incl. calculating total due amount (but not current dues)
    - searching and listing registrations (admin only)
    - registration status progression (new - approved - partially paid - paid - checked in / waiting / cancelled / deleted)
    - ban detection and management
    - transferring registrations when re-sold
  license:
    name: MIT
    url: https://github.com/eurofurence/reg-attendee-service/blob/main/LICENSE
  version: 0.1.0
servers:
  - url: /api/rest/v1
    description: localhost
  - url: /attsrv/api/rest/v1
    description: server
tags:
  - name: registration
    description: Register and change attendees
  - name: additional
    description: Additional info (for use by external systems such as sponsordesk, regdesk, ...) and for remembering internal state.
  - name: status
    description: Status progression
  - name: privileged
    description: Privileged (admin only) functionality
  - name: webhook
    description: Webhook notifications
  - name: info
    description: Health and other public status information
paths:
  /attendees:
    get:
      tags:
        - registration
      summary: List my own registration ids
      description: |-
        List attendee registrations that are owned by the current user, provided they are still visible to them.
        
        When a registration is first made, the currently logged in user is recorded in the registration,
        and thus assigned as the 'owner' of the registration. 
        
        - The frontend can use this to determine which registrations to offer for editing to a regular user.
        - The payment service can use this to determine which payment histories should be visible to a regular user.
        
        Even if an admin calls this, they will only receive those registrations that they own.
        An admin can transfer/assign ownership of a registration, for the cases where a registration is sold to a new owner.
        
        Since the user's identity is taken from the JWT representing the currently logged in user, 
        this endpoint cannot be called with an API token. It must be called on behalf of a logged in user.
        
        If you want lists of attendees according to search criteria, have a look at the attendees/find endpoint
        (assuming you have the necessary permissions).
        
        Note that allowing multiple registrations per user id is configuration dependant. If the configuration
        is set to allow only a single registration per user id, this endpoint will always return at most a single
        registration.
      operationId: listMyRegistrations
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttendeeIdList'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching attendees found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
    post:
      tags:
        - registration
      summary: Add a new attendee
      description: |-
        Register a new attendee and assign them a badge number. 
        
        The attendee will initially be in status new and the privileged information is set to all defaults.
        
        Note that depending on configuration, there needs to be a logged in user to make a registration.
        If this configuration is set, attempting to register without a valid login cookie will result
        in response status 401.
      operationId: addAttendee
      requestBody:
        description: Create a new attendee
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attendee'
        required: true
      responses:
        '201':
          description: Successfully created
          headers:
            Location:
              schema:
                type: string
              description: URL of the created resource, ending in the assigned Badge number.
        '400':
          description: Invalid input or registration not yet open (if you authenticate as staff, you may be allowed to register earlier)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required (can only occur if service is configured to require Authorization for all new registrations)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: duplicate (same nickname + email + zip code)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /attendees/{id}:
    get:
      tags:
        - registration
      summary: Find attendee by id
      description: Returns a single attendee
      operationId: getAttendeeById
      parameters:
        - name: id
          in: path
          description: Badge number of attendee to return
          required: true
          schema:
            type: integer
            minimum: 1
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attendee'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to see this attendee
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Attendee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
    put:
      tags:
        - registration
      summary: Update an existing attendee
      description: Update an existing attendee by Id
      operationId: updateAttendee
      parameters:
        - name: id
          in: path
          description: Badge number of attendee to update
          required: true
          schema:
            type: integer
            minimum: 1
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attendee'
        required: true
      responses:
        '200':
          description: Successful operation
          headers:
            Location:
              schema:
                type: string
              description: URL of the resource, ending in the assigned Badge number.
        '400':
          description: Invalid ID supplied or invalid data in request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to change this attendee
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Attendee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: your changes would turn this attendee into a duplicate (same nickname + email + zip code)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '502':
          description: The update leads to an update in the payment service which failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
  /attendees/{id}/additional-info/{area}:
    get:
      tags:
        - additional
      summary: obtain the current additional info for an area
      description: Returns the current additional info for an area (e.g. regdesk, sponsordesk, overdue, ...). User will need to have permission called {area} to access it.
      operationId: getAdditionalInfo
      parameters:
        - name: id
          in: path
          description: Badge number of attendee
          required: true
          schema:
            type: integer
            minimum: 1
            format: int64
        - name: area
          in: path
          description: Area (must match [a-z]+), note that 'overdue' is used internally
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        '400':
          description: Invalid ID or area supplied (area must match [a-z]+)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to see this attendee or area
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Attendee or area not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
    post:
      tags:
        - additional
      summary: set the current additional info for an area
      description: |
        Set the current additional info for an area (e.g. regdesk, sponsordesk, overdue, ...). User will need to have permission "area" to access it.
        
        You can store an arbitrary json object here, but the length is limited to 1024 characters.
      operationId: setAdditionalInfo
      parameters:
        - name: id
          in: path
          description: Badge number of attendee
          required: true
          schema:
            type: integer
            minimum: 1
            format: int64
        - name: area
          in: path
          description: Area (must match [a-z]+), note that 'overdue' is used internally
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 32
            example: sponsordesk
      requestBody:
        description: The data to store as additional info. Limited to 1024 characters when represented as a non-indented json object.
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
        required: true
      responses:
        '204':
          description: successful operation
        '400':
          description: Invalid ID or area supplied (area must match [a-z]+)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to see this attendee or area.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Attendee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
    delete:
      tags:
        - additional
      summary: remove the current additional info for an area
      description: |
        Remove the current additional info for an area (e.g. regdesk, sponsordesk, overdue, ...). User will need to have permission "area" to do this.
      operationId: deleteAdditionalInfo
      parameters:
        - name: id
          in: path
          description: Badge number of attendee
          required: true
          schema:
            type: integer
            minimum: 1
            format: int64
        - name: area
          in: path
          description: Area (must match [a-z]+), note that 'overdue' is used internally
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 32
            example: sponsordesk
      responses:
        '204':
          description: successful operation
        '400':
          description: Invalid ID or area supplied (area must match [a-z]+)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to see this attendee or area.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Attendee or area not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
  /attendees/{id}/admin:
    get:
      tags:
        - privileged
      summary: obtain privileged information about an attendee
      description: Returns admin info about a single attendee
      operationId: getAdminInfoById
      parameters:
        - name: id
          in: path
          description: Badge number of attendee to return
          required: true
          schema:
            type: integer
            minimum: 1
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminInfo'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to see this attendee
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Attendee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
    put:
      tags:
        - privileged
      summary: Update privileged information for an existing attendee
      description: Update privileged information for an attendee by Id. Note that there is no creation endpoint for this subresource, because a default set of values is always created when the attendee is created.
      operationId: updateAdminInfo
      parameters:
        - name: id
          in: path
          description: Badge number of attendee to update
          required: true
          schema:
            type: integer
            minimum: 1
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminInfo'
        required: true
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid ID supplied or invalid data in request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to change privileged information for this attendee
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Attendee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
  /attendees/{id}/payments-changed:
    post:
      tags:
        - webhook
      summary: notify service about a change to payments
      description: The payment service uses this to tell the attendee service that something about the payments of an attendee (id = debitor_id) has changed.
      operationId: webhookPaymentsChanged
      parameters:
        - name: id
          in: path
          description: Badge number of attendee for whom there was a change in payments or payment status
          required: true
          schema:
            type: integer
            minimum: 1
            format: int64
      responses:
        '202':
          description: successful operation, but current attendee status prevented a status re-evaluation (new, checked in, cancelled, deleted), so processing was intentionally skipped
        '204':
          description: successful operation
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required (only api key available)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Attendee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '502':
          description: The update leads to an update in the payment service which failed, or the mail service failed to send an email as part of the update.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - ApiKeyAuth: []
  /attendees/{id}/status:
    get:
      tags:
        - status
      summary: obtain the current status of an attendee
      description: Returns the current status of a single attendee. Note that this endpoint is also available to regular logged in users, this is why you only get the status field, not the full status change information. Request status history to get full information (privileged).
      operationId: getStatusById
      parameters:
        - name: id
          in: path
          description: Badge number of attendee to return
          required: true
          schema:
            type: integer
            minimum: 1
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusOnly'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to see this attendee
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Attendee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
    post:
      tags:
        - status
      summary: request a status change
      description: |-
        Attempt a status change for a single attendee.        
        
        Depending on the transition, this may be available to a normal logged in user or admin only.
        
        - new 
          - from: approved, partially paid, paid, checked in, cancelled: admin only
        - approved
          - from: new, cancelled, partially paid, paid: admin only
        - partially paid
          - from: approved, paid, cancelled: admin only - the payment service access counts as admin
        - paid
          - from: approved, partially paid, cancelled: admin only - the payment service access counts as admin
        - checked in
          - from: paid: regdesk permission or admin
        - cancelled
          - from: new, approved: self or admin
          - from: partially paid, paid, checked in: admin
        - deleted
          - from: new, approved: admin (not possible if any payments were made for tax reasons)
        
        Note that there may also be situational limitations, such as you cannot check in an attendee unless paid in full.
        These conditions result in a 409 status to distinguish them from situations where the transition is 
        unavailable to the requesting user for permission reasons, which gives a 403.

        For detailed documentation of what the status values mean, see under Schemas/Status below.
      operationId: changeStatus
      parameters:
        - name: id
          in: path
          description: Badge number of attendee to return
          required: true
          schema:
            type: integer
            minimum: 1
            format: int64
      requestBody:
        description: The status change with an optional comment for the reason. Note, the timestamp will be ignored.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusChange'
        required: true
      responses:
        '204':
          description: successful operation
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to see this attendee, or you do not have permission to perform this status change at all. Note that situational limitations (e.g. cannot check in an unpaid attendee) result in 409 instead. If you get 403, you do not have permissions for this status transition, ever.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Attendee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: The current situation does not allow this status change, even though you generally have permission to do it. Maybe you are trying to check in an attendee who hasn't fully paid, etc. See message and details fields of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '502':
          description: The update leads to an update in the payment service which failed, or the mail service failed to send an email as part of the update.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
  /attendees/{id}/status-history:
    get:
      tags:
        - status
      summary: obtain the history of status changes of an attendee
      description: Returns the status history of a single attendee
      operationId: getStatusHistoryById
      parameters:
        - name: id
          in: path
          description: Badge number of attendee to return
          required: true
          schema:
            type: integer
            minimum: 1
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusHistory'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to see this attendee, or you do not have privileges to see status history.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Attendee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
  /attendees/find:
    post:
      tags:
        - privileged
      summary: Find attendees by criteria sets
      description: Returns all matching attendees (privileged operation)
      operationId: findAttendees
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttendeeSearchCriteria'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttendeeSearchResultList'
        '400':
          description: Invalid search specification supplied, see details for precise error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
  /bans:
    get:
      tags:
        - privileged
      summary: List all ban rules
      description: obtain the list of all ban rules.
      operationId: listBanRules
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BanRuleList'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to see ban rules
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
    post:
      tags:
        - privileged
      summary: Add a new ban rule
      description: |-
        Add a new rule to flag potentially banned attendees.
        
        Even if the system is configured to normally auto-approve registrations, any registration where
        at least one of name, email or nickname matches the respective regex, will be put on hold
        for decision by an admin.
      operationId: addBanRule
      requestBody:
        description: Create a new ban rule
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BanRule'
        required: true
      responses:
        '201':
          description: Successfully created
          headers:
            Location:
              schema:
                type: string
              description: URL of the created resource, ending in the assigned id.
        '400':
          description: Invalid input, possibly malformed json or fields did not contain a valid regular expression. See detail message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required (must be admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: duplicate (same regexes)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
  /bans/{id}:
    get:
      tags:
        - privileged
      summary: Find ban rule by id
      description: Returns a single ban rule
      operationId: getBanRuleById
      parameters:
        - name: id
          in: path
          description: id to return
          required: true
          schema:
            type: integer
            minimum: 1
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BanRule'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to see ban rules
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Ban rule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
    put:
      tags:
        - privileged
      summary: Update an existing ban rule
      description: Update an existing ban rule by Id
      operationId: updateBanRule
      parameters:
        - name: id
          in: path
          description: id of ban rule to update
          required: true
          schema:
            type: integer
            minimum: 1
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BanRule'
        required: true
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid ID supplied or invalid data in request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to change ban rules
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Ban rule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: your changes would turn this ban rule into a duplicate (all three patterns identical)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
    delete:
      tags:
        - privileged
      summary: Delete ban rule by id
      description: Deletes a single ban rule
      operationId: deleteBanRuleById
      parameters:
        - name: id
          in: path
          description: id to return
          required: true
          schema:
            type: integer
            minimum: 1
            format: int64
      responses:
        '204':
          description: successful operation
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to alter ban rules
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Ban rule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
  /countdown:
    get:
      tags:
        - info
      summary: registration countdown
      description: Returns the countdown status
      operationId: countdown
      parameters:
        - name: currentTime
          in: query
          description: Testing override for the current time. Used in end to end tests for the frontend. Not useful in production because the attendee endpoints also check the countdown.
          schema:
            type: string
            format: date-time
            example: 2006-01-02T15:04:05-07:00
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Countdown'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Attendee:
      type: object
      required:
        - nickname
        - first_name
        - last_name
        - street
        - zip
        - city
        - country
        - email
        - phone
        - birthday
        - packages
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          description: This badge number is automatically assigned during initial registration. Optional for request bodies, but if specified it must match. It is not possible to change your badge number.
          example: 10
        nickname:
          type: string
          minLength: 1
          maxLength: 80
          description: The nickname you would like to be known under. Must contain at least on alphanumeric character, and may not contain more than two non-alphanumeric characters (not counting spaces)
          example: FluffyCheetah
        first_name:
          type: string
          minLength: 1
          maxLength: 80
          description: Your first name. Cannot be empty.
          example: John
        last_name:
          type: string
          minLength: 1
          maxLength: 80
          description: Your last name. Cannot be empty.
          example: Doe
        street:
          type: string
          minLength: 1
          maxLength: 120
          description: Your street address, including number
          example: Teststraße 24
        zip:
          type: string
          minLength: 1
          maxLength: 20
          description: Your postal / zip code
          example: 13591
        city:
          type: string
          minLength: 1
          maxLength: 80
          description: Your city
          example: Berlin
        country:
          type: string
          minLength: 2
          maxLength: 2
          description: 2 letter ISO-3166-1 country code for the address (Alpha-2 code), for example DE for Germany. Internally validated against a list from configuration.
          example: DE
        state:
          type: string
          maxLength: 80
          description: Your state (optional)
          example: Bavaria
        email:
          type: string
          description: Your email address. If a non-admin changes the email address and an identity provider is in use, must match the email address of your account, because then we can skip email verification. This means you must first change your email in the idp, then change it here, or the change will be rejected.
          example: email@mailinator.com
        phone:
          type: string
          description: Your phone number
          example: +1 500 0000 000
        telegram:
          type: string
          description: Your telegram handle (optional), but has turned out tremendously useful during the convention. Supply complete handle including the @ character, or leave blank if you do not have one or don't wish to provide it.
        partner:
          type: string
          maxLength: 80
          description: The nickname of your significant other (optional). Used by some conventions to facilitate manual room assignment. Not used by all conventions.
        birthday:
          type: string
          format: date
          description: Your date of birth, in ISO date format (yyyy-mm-dd)
          example: 1980-08-20
        gender:
          $ref: '#/components/schemas/Gender'
        pronouns:
          type: string
          maxLength: 40
          description: Your preferred pronouns (optional).
          example: they/them
        tshirt_size:
          type: string
          description: Your t-shirt size (optional). Validated against a list from configuration if specified.
          example: XXL
        spoken_languages:
          type: string
          description: |-
            A comma separated list of a configurable subset of RFC 5646 locales (language-REGION) that specify the spoken languages, in order of preference,
            according to the IANA language registry (https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry).
            
            The list of allowed values is specified in the service configuration, and is used to select email language templates as well as represented on the badge.
          example: 'de-DE,en-US'
        registration_language:
          type: string
          description: |-
            A single entry out of a small configurable subset of RFC 5646 locales (language-REGION) that remember the ui language and number/date format used for this attendee in the registration system,
            according to the IANA language registry (https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry).
            
            If unset, defaults to a value that is configuration dependent, usually en-US (the primary language of the registration system for the given convention).
            
            Currently the only supported value is en-US.
          example: en-US
        flags:
          type: string
          description: A comma separated list of flags as declared in configuration. Flags are used to store yes/no-style information about an attendee, and displayed as checkboxes. Flags can be configured with respect to their visibility and who may change them (admin only, normal user). Flags are used to represent properties of the attendee, such as "is staff", "does not wish their name to appear in the convention booklet", etc.
          example: anon,ev
        options:
          type: string
          description: A comma separated list of options as declared in configuration. Options are used to store yes/no-style choices an attendee makes that do not cost money, and displayed as checkboxes. With Options, you cannot control the visibility in the configuration, as they are basically options given to the attendee that do not cost money. Use these for "I wish to receive emails about x subject" or "I am a fursuiter" etc.
          example: art,anim,music,suit
        packages:
          type: string
          description: A comma separated list of packages as declared in configuration. Packages are the things that cost money, like being a supersponsor or a day guest for a certain day. They can be configured with respect to who may add / remove them, if they are on by default, and whether they are visible if not selected (admin only, normal user, completely disabled). There is also configuration as to which packages are mutually exclusive, such as sponsor and supersponsor.
          example: room-none,attendance,sponsor
        user_comments:
          type: string
          description: Optional comments the attendee wishes to make regarding their registration. Not processed in any way.
          example: I love eurofurence
    AttendeeIdList:
      type: object
      required:
        - ids
      properties:
        ids:
          type: array
          description: a list of attendee ids
          items:
            type: integer
            format: int64
            minimum: 1
            description: This badge number is automatically assigned during initial registration.
            example: 10
    AttendeeSearchResultList:
      type: object
      required:
        - attendees
      properties:
        attendees:
          type: array
          description: a list of search results
          items:
            $ref: '#/components/schemas/AttendeeSearchResult'
    AttendeeSearchResult:
      type: object
      description: a single search result. Note that field visibility may depend on your search query and also on your permissions. Effectively, the only field that is always present is the id field.
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          description: This badge number is automatically assigned during initial registration. Optional for request bodies, but if specified it must match. It is not possible to change your badge number.
          example: 10
        badge_id:
          type: string
          description: the badge number including the checksum letter, as it will be printed on the badge.
          example: 4Y
        nickname:
          type: string
          maxLength: 80
          example: FluffyCheetah
        first_name:
          type: string
          maxLength: 80
          example: John
        last_name:
          type: string
          maxLength: 80
          example: Doe
        street:
          type: string
          maxLength: 120
          example: Teststraße 24
        zip:
          type: string
          maxLength: 20
          example: 13591
        city:
          type: string
          maxLength: 80
          example: Berlin
        country:
          type: string
          maxLength: 2
          description: 2 letter ISO-3166-1 country code for the address (Alpha-2 code), for example DE for Germany.
          example: DE
        state:
          type: string
          maxLength: 80
          example: Bavaria
        email:
          type: string
          example: email@mailinator.com
        phone:
          type: string
          example: +1 500 0000 000
        telegram:
          type: string
          description: complete telegram handle including the @ character
        partner:
          type: string
          description: The nickname of a significant other
        birthday:
          type: string
          format: date
          description: The date of birth, in ISO date format (yyyy-mm-dd)
          example: 1980-08-20
        gender:
          $ref: '#/components/schemas/Gender'
        pronouns:
          type: string
          maxLength: 40
          example: they/them
        tshirt_size:
          type: string
          example: XXL
        spoken_languages:
          type: string
          description: |-
            A comma separated list of a configurable subset of RFC 5646 locales (language-REGION) that specify the spoken languages, in order of preference,
            according to the IANA language registry (https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry).
            
            The list of allowed values is specified in the service configuration, and is used to select email language templates as well as represented on the badge.
          example: 'de-DE,en-US'
        registration_language:
          type: string
          description: |-
            A single entry out of a small configurable subset of RFC 5646 locales (language-REGION) that remember the ui language and number/date format used for this attendee in the registration system,
            according to the IANA language registry (https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry).
            
            If unset, defaults to a value that is configuration dependent, usually en-US (the primary language of the registration system for the given convention).
            
            Currently the only supported value is en-US.
          example: en-US
        flags:
          type: string
          description: A comma separated list of flags as declared in configuration. Flags are used to store yes/no-style information about an attendee, and displayed as checkboxes. Flags can be configured with respect to their visibility and who may change them (admin only, normal user). Flags are used to represent properties of the attendee, such as "is staff", "does not wish their name to appear in the convention booklet", etc.
          example: anon,ev
        options:
          type: string
          description: A comma separated list of options as declared in configuration. Options are used to store yes/no-style choices an attendee makes that do not cost money, and displayed as checkboxes. With Options, you cannot control the visibility in the configuration, as they are basically options given to the attendee that do not cost money. Use these for "I wish to receive emails about x subject" or "I am a fursuiter" etc.
          example: art,anim,music,suit
        packages:
          type: string
          description: A comma separated list of packages as declared in configuration. Packages are the things that cost money, like being a supersponsor or a day guest for a certain day. They can be configured with respect to who may add / remove them, if they are on by default, and whether they are visible if not selected (admin only, normal user, completely disabled). There is also configuration as to which packages are mutually exclusive, such as sponsor and supersponsor.
          example: room-none,attendance,sponsor
        user_comments:
          type: string
          description: Optional comments the attendee wishes to make regarding their registration. Not processed in any way.
          example: I love eurofurence
        status:
          $ref: '#/components/schemas/Status'
        total_dues:
          type: integer
          format: int64
          description: the total dues in cents, or whatever the smallest denomination is in the currency of the convention. Taken from cached information, so may not always be 100% accurate.
        payment_balance:
          type: integer
          format: int64
          description: the current payment balance in cents (valid payments only), or whatever the smallest denomination is in the currency of the convention. Taken from cached information, so may not always be 100% accurate.
        current_dues:
          type: integer
          format: int64
          description: the current outstanding dues in cents, or whatever the smallest denomination is in the currency of the convention. Taken from cached information, so may not always be 100% accurate.
        due_date:
          type: string
          format: date
          example: '2022-06-18'
          description: the date at which dues become/became overdue.
        registered:
          type: string
          format: date
          example: '2022-01-22'
          description: the date at which the registration was created.
        admin_comments:
          type: string
          description: Optional comments only visible to admins. Not processed in any way.
    AttendeeSearchCriteria:
      type: object
      required:
        - match_any
      properties:
        match_any:
          type: array
          description: |
            A list of search criteria. 
            
            An attendee matches if they match ANY of the given criteria sets, so these are effectively connected by OR.
            
            If you give the empty list, all attendees that are visible to you will match.
            
            Your permissions may also limit which fields or attendees you will see in the response.
          items:
            $ref: '#/components/schemas/AttendeeSearchSingleCriterion'
        min_id:
          type: integer
          format: int64
          minimum: 1
          description: badge number to begin search at (inclusive)
          example: 10
        max_id:
          type: integer
          format: int64
          minimum: 1
          description: badge number to end search at (inclusive)
          example: 400
        num_results:
          type: integer
          format: int64
          minimum: 1
          description: maximum number of results to return. Together with min_id, this can be used for pagination if you sort by id.
          example: 100
        fill_fields:
          $ref: '#/components/schemas/AttendeeFieldSelection'
        sort_by:
          type: string
          description: specifies the sort order, defaults to id
          default: id
          enum:
            - id
            - status
            - nickname
            - birthday
            - email
            - name
            - zip
            - city
            - country
        sort_order:
          type: string
          description: specifies the direction of the sort order, defaults to ascending
          default: ascending
          enum:
            - ascending
            - descending
    AttendeeSearchSingleCriterion:
      type: object
      description: a set of search criteria. All criteria are optional, but if you set multiple ones, they are connected by AND.
      properties:
        ids:
          type: array
          items:
            type: integer
            format: int64
            minimum: 1
            description: badge number (exact match)
            example: 10
        nickname:
          type: string
          description: full match, case insensitive, use * as a wildcard for substring matches
          example: '*chee*h'
        name:
          type: string
          description: full match on first and last name separated by a space, case insensitive, use * as a wildcard for substring matches
          example: 'john*doe'
        address:
          type: string
          maxLength: 120
          description: substring match on the mailing address, case insensitive, use * as a wildcard for substring matches inside, no need to supply surrounding *
          example: 'straße*24'
        country:
          type: string
          maxLength: 2
          description: 2 letter ISO-3166-1 country code for the address (Alpha-2 code), for example DE for Germany.
          example: DE
        email:
          type: string
          description: full match on email, case insensitive, use * as a wildcard for substring matches
          example: email@mailinator.com
        telegram:
          type: string
          description: full match on telegram handle, case insensitive, use * as a wildcard for substring matches
        spoken_languages:
          description: desired state of spoken language locales (as declared in configuration). If specified at all, locale must be present the given number of times (0 or 1). Example selects all attendees that speak German, but not English.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ChoiceStateCondition'
          example:
            de-DE: 1
            en-US: 0
        registration_language:
          description: desired state of registration language locales (as declared in configuration). If specified at all, locale must be present the given number of times (0 or 1). Example would select all attendees that use the non-English registration ui.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ChoiceStateCondition'
          example:
            en-US: 0
        flags:
          description: desired state of flags as declared in configuration. If specified at all, flag must be present the given number of times (0 or 1). Admin flags are available to users for whom they are visible.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ChoiceStateCondition'
          example:
            anon: 1
            ev: 0
        options:
          description: desired state of options as declared in configuration. If specified at all, flag must be present the given number of times (0 or 1).
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ChoiceStateCondition'
          example:
            music: 1
            suit: 0
        packages:
          description: desired state of packages as declared in configuration. If specified at all, flag must be present the given number of times (0 or 1).
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ChoiceStateCondition'
          example:
            attendance: 1
            sponsor: 0
        user_comments:
          type: string
          description: substring match on the user comments, case insensitive, use * as a wildcard for substring matches, no need to supply surrounding *
          example: 'euro*rence'
        status:
          description: what status values to include in the result. If set at all, you must include all status values that you wish to search for. Or you can leave this unset to pose no status condition.
          type: array
          items:
            $ref: '#/components/schemas/Status'
          example:
            - approved
            - partially paid
            - paid
        permissions:
          description: desired state of permissions. If specified at all, permission must be present the given number of times (0 or 1).
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ChoiceStateCondition'
          example:
            regdesk: 1
            sponsordesk: 0
        admin_comments:
          type: string
          description: substring match on the admin comments, case insensitive, use * as a wildcard for substring matches, no need to supply surrounding *. Only used if field visible to you.
          example: 'wheelchair'
        add_info:
          description: presence of additional info area. If specified at all, a value for the area must be present the given number of times (0 or 1). Note you can only search for whether a key is present for an attendee, not for contents of the value. Note that area 'overdue' is used internally.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ChoiceStateCondition'
          example:
            sponsor-items: 1
            key-hand-out: 0
            overdue: 1
    ChoiceStateCondition:
      type: integer
      format: int64
      minimum: 0
      maximum: 1
      description: desired state of choice, 0 = must be no, 1 = must be yes. Leave missing to pose no condition.
      example: 1
    AttendeeFieldSelection:
      type: array
      description: |-
        Pick the fields or field sets you'd like the search to return. The only field you cannot turn off is the id, which is why you don't need to list it (you can, though).
        
        Turning off fields may significantly reduce bandwidth and improve response times.

        Apart from listing individual fields, which are all available, these sets are defined: 
      
        - name: first_name, last_name
        - address: street, zip, city, state, country
        - contact: email, phone, telegram, spoken_languages
        - configuration: registration_language, flags, options, packages
        - balances: total_dues, payment_balance, current_dues, due_date
        - all: (all available fields)
      
        For a detailed description of the fields, please see the AttendeeSearchResult schema.
      
        Keep in mind that your permissions may limit field visibility.
      
        Also remember that even if you don't list the id field, you will still get it.
      
        You will not get fields that you don't have permission to see even if you request them.
        
        If you do not specify any fields, only the id will be returned.
      items:
        type: string
        enum:
          # individual fields
          - id
          - nickname
          - first_name
          - last_name
          - street
          - zip
          - city
          - country
          - state
          - email
          - phone
          - telegram
          - partner
          - birthday
          - gender
          - pronouns
          - tshirt_size
          - spoken_languages
          - registration_language
          - flags
          - options
          - packages
          - user_comments
          - status
          - total_dues
          - payment_balance
          - current_dues
          - due_date
          - registered
          - admin_comments
          # and the field sets
          - name
          - address
          - contact
          - configuration
          - balances
          - all
    AdminInfo:
      type: object
      required:
        - flags
        - admin_comments
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          description: This badge number is automatically assigned during initial registration (when creating an attendee). Optional for request bodies, but if specified it must match. It is not possible to change your badge number.
          example: 10
        flags:
          type: string
          description: |-
            A comma separated list of admin-only flags as declared in configuration, but only those that are not even _visible_ to a normal user. This is a separate field in order to avoid having resources change depending on your permissions, as that may lead to strange behaviour.  
            
            Flags are used to store yes/no-style information about an attendee, and displayed as checkboxes. Flags can be configured with respect to their visibility and who may change them (admin only, normal user). Flags are used to represent properties of the attendee, such as "is staff", "does not wish their name to appear in the convention booklet", etc.
          example: banflagged,security
        permissions:
          type: string
          description: |-
            A comma separated list of permissions that control extended permission in the registration system, where not governed by roles in the token.
            
            In the long term, we will probably migrate away from this, but at the moment, they are needed so regsys classic can continue to function.
          example: read_all,bans,announcements
        admin_comments:
          type: string
          description: Optional comments only visible to admins. Not processed in any way.
        manual_dues:
          type: integer
          format: int64
          example: -8000
          description: |-
            Offset to book on the due amount, may be negative. If negative, will offset the highest VAT rates first. If positive, will be added at highest available VAT rate. 
            
            Smallest denomination of convention currency, for example cents. If the currency is EUR, the example would be a credit of 80 EUR.
        manual_dues_description:
          type: string
          maxLength: 80
          description: Description to use for the manual dues booking.
          example: credit from last year
    BanRule:
      type: object
      required:
        - reason
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          description: This numerical id is automatically assigned when the ban rule is first saved. Optional for request bodies, but if specified it must match. It is not possible to change this.
          example: 10
        reason:
          type: string
          minLength: 1
          maxLength: 255
          description: brief description of why there is a ban
          example: started a howl
        name_pattern:
          type: string
          maxLength: 255
          description: regular expression to match the name (first last) against. Blank value or omission means no condition.
          example: 'John.*Doe'
        nickname_pattern:
          type: string
          maxLength: 255
          description: regular expression to match the nickname against. Blank value or omission means no condition.
          example: '(abc|def[^x-z]+)'
        email_pattern:
          type: string
          maxLength: 255
          description: regular expression to match the email address against. Blank value or omission means no condition.
          example: 'a@mailinator.com'
    BanRuleList:
      type: object
      required:
        - bans
      properties:
        bans:
          type: array
          items:
            $ref: '#/components/schemas/BanRule'
          description: the list of ban rules
    Countdown:
      type: object
      required:
        - currentTime
        - targetTime
        - countdown
      properties:
        currentTime:
          type: string
          format: date-time
          description: The current time on the server
          example: 2006-01-02T15:04:05+07:00
        targetTime:
          type: string
          format: date-time
          description: The time at which the countdown ends (may depend on authorization, e.g. staff may register earlier than normal users)
          example: 2006-01-02T15:04:05+07:00
        countdown:
          type: integer
          format: int64
          description: The number of seconds until the countdown ends (may depend on authorization, e.g. staff may register earlier than normal users). Stays at 0 if the countdown is over.
          example: 12648
    StatusOnly:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/Status'
    StatusChange:
      type: object
      required:
        - status
      properties:
        timestamp:
          type: string
          format: date-time
          description: The time at which the status change occurred. Ignored when you send us a status change and replaced with the current server time. Always present when we return a status change entry to you.
          example: 2006-01-02T15:04:05+07:00
        status:
          $ref: '#/components/schemas/Status'
        comment:
          type: string
          maxLength: 256
          description: The reason for the status change, e.g. cancel reason, or any other comment
          example: cancelled by own request
    StatusHistory:
      type: object
      required:
        - status_history
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          description: This badge number is automatically assigned during initial registration (when creating an attendee). Informational only.
          example: 10
        status_history:
          type: array
          items:
            $ref: '#/components/schemas/StatusChange'
    Status:
      type: string
      enum:
        - new
        - approved
        - partially paid
        - paid
        - checked in
        - cancelled
        - deleted
        - waiting
      description: |-
        Status of an attendee. The values mean:
        
        - new: the attendee is pending approval, e.g. because of a ban check positive, no dues are assigned         
        - approved: the attendee has been automatically or manually approved, and dues are assigned
        - partially paid: the attendee has made payments, but they do not cover enough of the dues
        - paid: the attendee has paid enough of the dues
        - checked in: the attendee has arrived at the convention and received their badge
        - cancelled: the registration is no longer current, depending on when the cancellation occurs, a refund may be available
        - deleted: the registration was made in error, has invalid data, or the attendee requested to have their data deleted - only possible if no payments exist
        - waiting: the attendee has been placed on the waiting list. This may occur if the convention has a limited number of places.
        
        For a detailed description of available status transitions and who may do them see the documentation of the 
        "request a status change" POST endpoint.
    Gender:
      type: string
      enum:
        - notprovided
        - male
        - female
        - other
      default: notprovided
      description: |
        Your gender (optional).
        
        Usually collected for statistical purposes only, unless the system does room assignment for youth hostel situations in the presence of minors, in which case this may be important information.

        Conventions are at liberty to hide this field in the UI altogether, in which case all attendees will have it set to "notprovided".
    Error:
      type: object
      required:
        - message
        - timestamp
        - requestid
      properties:
        timestamp:
          type: string
          format: date-time
          description: The time at which the error occurred.
          example: 2006-01-02T15:04:05+07:00
        requestid:
          type: string
          description: An internal trace id assigned to the error. Used to find logs associated with errors across our services. Display to the user as something to communicate to us with inquiries about the error.
          example: a8b7c6d5
        message:
          type: string
          description: |-
            A keyed description of the error. We do not write human readable text here because the user interface will be multi language.
            
            At this time, there are these values:
            - attendee.max_id.error (database error or overload)
            - attendee.owned.error (database error or overload)
            - attendee.owned.notfound (no registrations owned by current user)
            - attendee.parse.error (json body parse error)
            - attendee.data.invalid (field data failed to validate, see details for more information)
            - attendee.data.duplicate (duplicate registration - nickname + email + zip)
            - attendee.write.error (database error)
            - attendee.payment.error (payment service failure while updating attendee)
            - attendee.id.notfound (no such badge number in the database)
            - attendee.id.invalid (syntactically invalid badge number, must be positive integer)
            - admin.read.error (database error)
            - admin.write.error (database error)
            - admin.parse.error (json body parse error)
            - admin.data.invalid (field data failed to validate, see details for more information)
            - auth.unauthorized (token missing completely or invalid)
            - auth.forbidden (permissions missing)
            - ban.parse.error (json body parse error)
            - ban.data.invalid (field data failed to validate, see details for more information)
            - ban.data.duplicate (duplicate ban rule with all regexes identical)
            - ban.read.error (database error)
            - ban.write.error (database error)
            - ban.id.invalid (syntactically invalid ban rule id, must be positive integer)
            - ban.id.notfound (no such ban rule id in the database)
            - search.parse.error (json body parse error)
            - search.read.error (database error)
            - status.read.error (database error)
            - status.write.error (database error)
            - status.mail.error (mail service failure while doing status change)
            - status.payment.error (payment service failure while doing status change)
            - status.parse.error (json body parse error)
            - status.unchanged.invalid (not actually a status change)
            - status.data.invalid (field data failed to validate, see details for more information)            
            - status.unpaid.dues (this status change is blocked because there are outstanding payments)
            - status.has.paid (this status change is impossible because there is a nonzero payment balance) 
            - status.cannot.delete (deletion is not possible, e.g. there are payments, or an invoice was issued and tax law says we have to store this data for 10 years)
            - status.use.approved (you tried to go directly to partially paid, paid, or checked in from new, cancelled, deleted - please use approved, this will automatically set (partially) paid as appropriate)
          example: attendee.data.invalid
        details:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          description: Optional additional details about the error. If available, will usually contain English language technobabble.
          example:
            other:
              - email address does not match the regular expression
              - you need to refill the flux capacitor before the operation can succeed
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      description: A bearer or session token obtained from the auth service (which may integrate an OIDC identity provider)
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-Api-Key
      description: A shared secret used for local communication (also useful for local development)
